import { encodeId, decodeId } from '../pages/idEncoder';
const API_BASE_SERVICES = '/api/v1/Services';

// Improved response handler
const handleResponse = async (response) => {
  // Read response as text first
  const text = await response.text();
  let data;
  try {
    data = text ? JSON.parse(text) : {};
  } catch (err) {
    // If parsing fails, log the raw text for debugging
    console.error("Failed to parse JSON response:", text);
    data = text;
  }

  if (!response.ok) {
    const error = (data && data.message) || response.statusText || data;
    throw new Error(error || 'Request failed');
  }

  return data;
};

// Create service using FormData (ID is generated by the database, adminID is fixed)
export const createService = async (data) => {
  const payload = new FormData();
  payload.append('name', data.name);
  payload.append('description', data.description);
  // Fixed admin ID provided by you
  payload.append('adminID', '18D847AA-2C3D-4BA8-A676-9996945F20D8');

  const response = await fetch(API_BASE_SERVICES, {
    method: 'POST',
    body: payload,
  });

  return handleResponse(response);
};

export const getAllServices = async () => {
  const response = await fetch(`${API_BASE_SERVICES}/GetAll`);
  if (!response.ok) throw new Error('Failed to fetch services');
  const data = await response.json();
  return data.map(service => ({
    ...service,
    encryptedId: encodeId(service.id),
  }));
};

export const getServiceById = async (encryptedId) => {
  const id = decodeId(encryptedId);
  const response = await fetch(`${API_BASE_SERVICES}/GetById?id=${id}`);
  if (!response.ok) throw new Error('Failed to get service');
  const data = await response.json();
  return {
    ...data,
    encryptedId: encodeId(data.id),
  };
};

export const updateService = async (encryptedId, updateData) => {
  const id = decodeId(encryptedId);
  const response = await fetch(`${API_BASE_SERVICES}/${id}`, {
    method: 'PUT',
    headers: {
      'Content-Type': 'application/json',
    },
    body: JSON.stringify(updateData),
  });
  return handleResponse(response);
};

export const deleteService = async (encryptedId) => {
  const id = decodeId(encryptedId);
  const response = await fetch(`${API_BASE_SERVICES}/${id}`, {
    method: 'DELETE',
  });
  return handleResponse(response);
};
